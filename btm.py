import pandas as pdfrom biterm.utility import vec_to_bitermsfrom biterm.btm import oBTMfrom sklearn.feature_extraction.text import TfidfVectorizerfrom sklearn.cluster import KMeansfrom sklearn.feature_extraction.text import CountVectorizerimport numpy as npimport pyLDAvisfrom biterm.utility import vec_to_biterms, topic_summuaryimport warningswarnings.simplefilter(action='ignore', category=FutureWarning)# Load the dataframe and select the 'Opis_EN' columndf2 = pd.read_csv('/Users/jelena/Desktop/Python Projects/Learning/gifts/data/df_final.csv')opis_en = df2['Description']opis_en = opis_en[:500]# Vectorize the text datavectorizer = TfidfVectorizer()X = vectorizer.fit_transform(opis_en)feature_names = np.array(vectorizer.get_feature_names_out())# Get the number of unique wordsnum_unique_words = len(feature_names)# Convert the text data into bitermsbiterms = vec_to_biterms(np.atleast_1d(opis_en).nonzero())# Set the BTM parametersnum_topics = 5  # Number of topics to discoverbtm = oBTM(num_topics=5, V=feature_names)len(feature_names)# Fit the BTM model to the bitermstopics = btm.fit_transform(biterms, iterations=20)# Print the top words for each topicprint("\n\n Visualize Topics ..")vis = pyLDAvis.prepare(btm.phi_wz.T, topics, np.count_nonzero(X, axis=1), feature_names, np.sum(X, axis=0))pyLDAvis.save_html(vis, './vis/simple_btm.html')print("\n\nTopic coherence ..")topic_summuary(btm.phi_wz.T, X.toarray(), feature_names, 10)print("\n\n Texts & Topics ..")for i in range(len(opis_en)):    print("{} (topic: {})".format(opis_en[i], topics[i].argmax()))